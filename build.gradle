buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        kotlinVersion = '1.3.21'
        springBootProjectGroup = 'com.kyunam'
    }
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-allopen:${kotlinVersion}")
        classpath("org.jetbrains.kotlin:kotlin-noarg:${kotlinVersion}")
    }
}

plugins {
    id "org.asciidoctor.convert" version "2.1.0"
}

def static getDate() {
    def date = new Date()
    def formattedDate = date.format('yyyyMMddHHmmss')
    return formattedDate
}

ext {
    springBootProjectVersion = '0.0.0-' + getDate()
}

subprojects {
    group "${springBootProjectGroup}"
    version "${springBootProjectVersion}"

    apply plugin: 'java'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'kotlin'
    apply plugin: 'kotlin-spring'
    apply plugin: "kotlin-jpa"

    sourceCompatibility = 1.8
    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = ["-Xjsr305=strict"]
            jvmTarget = "1.8"
        }
    }

    repositories {
        mavenCentral()
    }

    test {
        useJUnitPlatform()
    }

    dependencies {

        implementation('com.fasterxml.jackson.module:jackson-module-kotlin')
        implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")
        implementation("org.jetbrains.kotlin:kotlin-reflect")

        implementation('javax.validation:validation-api')

        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'junit', module: 'junit'
        }
        testImplementation('org.junit.jupiter:junit-jupiter-api')
        testImplementation('org.junit.jupiter:junit-jupiter-params')
        testRuntimeOnly('org.junit.jupiter:junit-jupiter-engine')
        testCompile('org.mockito:mockito-junit-jupiter:2.18.3')
        testImplementation('com.h2database:h2')
    }
}

def restDocsProject = [
        project(':skeleton-api')
]

configure(restDocsProject) {

    apply plugin: "org.asciidoctor.convert"

    ext {
        snippetsDir = file('build/generated-snippets')
    }

    asciidoctor {
        inputs.dir snippetsDir
        dependsOn test
    }

    bootJar {
        dependsOn asciidoctor
        from ("${asciidoctor.outputDir}/html5") {
            into 'static/docs'
        }
    }

    build {
        dependsOn asciidoctor
    }

    dependencies {
        asciidoctor 'org.springframework.restdocs:spring-restdocs-asciidoctor:2.0.3.RELEASE'
        testImplementation 'org.springframework.security:spring-security-test'
        testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'
    }
}

